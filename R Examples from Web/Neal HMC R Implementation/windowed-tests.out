
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # TESTS USING OF WINDOWED HMC USING MULTIVARIATE NORMAL DISTRIBUTION.
> #
> # Radford M. Neal, 2012.
> 
> source("mcmc.r")
> source("utilities.r")
> source("basic_hmc.r")
> source("windowed_hmc.r")
> source("pupdate.r")
> source("mvn.r")
> 
> 
> # --------------------------------------------------------------------
> 
> # FUNCTIONS FOR SAMPLING A MULTIVARIATE NORMAL WITH BASIC AND WINDOWED HMC.
> 
> 
> # SAMPLE USING BASIC HAMILTONIAN MONTE CARLO.
> 
> bhmc_mvn <- function (iterations, step, ...)
+ {
+   mcmc (lpr_mvn, c(a=0, b=0), iterations,
+         list(basic_hmc, step=step, nsteps=20),
+         ...
+   )
+ }
> 
> 
> # SAMPLE USING BASIC HAMILTONIAN MONTE CARLO, BUT USING WINDOWED HMC FUNCTION.
> 
> wbhmc_mvn <- function (iterations, step, ...)
+ {
+   mcmc (lpr_mvn, c(a=0, b=0), iterations,
+         list(windowed_hmc, step=step, nsteps=20),
+         ...
+   )
+ }
> 
> 
> # SAMPLE USING WINDOWED HAMILTONIAN MONTE CARLO.
> 
> whmc_mvn <- function (iterations, step, nsteps, window, ...)
+ {
+   mcmc (lpr_mvn, c(a=0, b=0), iterations,
+         list(windowed_hmc, step=step, nsteps=nsteps, window=window),
+         rec=c("acc","ipos","move"), ...
+   )
+ }
> 
> # --------------------------------------------------------------------
> 
> # FUNCTION TO LOOK AT RESULTS OF THE TESTS BELOW.
> 
> mvn.look <- function (r)
+ { if (is.list(r$q))
+   { q1 <- r$q[[1]]
+     q2 <- r$q[[2]]
+   }
+   else
+   { q1 <- r$q[,1]
+     q2 <- r$q[,2]
+   }
+   cat("m1:",round(mean(q1),4)," m2:",round(mean(q2),3),
+       " v1:",round(var(q1),4)," v2:",round(var(q2),3),
+       " corr:",round(cor(q1,q2),3),
+       " act+:",round (2*sum(acf(q1+q2,plot=FALSE,lag.max=100)$acf)-1, 1),
+       " act-:",round (2*sum(acf(q1-q2,plot=FALSE,lag.max=100)$acf)-1, 1),
+       "\n")
+   plot(q1,q2,pch=".")
+ }
> 
> 
> # --------------------------------------------------------------------
> 
> # SCRIPT FOR RUNNING THE TESTS.
> 
> inv.cov <- solve (matrix (c (0.5, 0.97, 0.97, 2.0), 2, 2))
> 
> formals(lpr_mvn)$inv.cov <- inv.cov
> 
> # Tests with just four iterations, for comparing results.  Should be
> # the same for standard HMC using basic_hmc and windowed_hmc.
> 
> cat("SHORT TESTS\n")
SHORT TESTS
> 
> cat("\nb:\n");   print ((r4.b <-  bhmc_mvn (4, 0.22)) $ q)

b:
               a           b
[1,] -0.06090633 -0.03583422
[2,]  0.26114217  0.48523074
[3,] -0.24454299 -0.41267316
[4,]  0.61231761  1.47574148
> cat("\nwb:\n");  print ((r4.wb <- wbhmc_mvn (4, 0.22)) $ q)

wb:
               a           b
[1,] -0.06090633 -0.03583422
[2,]  0.26114217  0.48523074
[3,] -0.24454299 -0.41267316
[4,]  0.61231761  1.47574148
> 
> # Tests with 10000 iterations, for comparing with the correct distribution.
> 
> cat("\nLONG TESTS\n\n")

LONG TESTS

> 
> cat("b1:\n"); mvn.look(r <- rb1 <- bhmc_mvn (10000, 0.22))
b1:
m1: 0.0011  m2: -0.003  v1: 0.4759  v2: 1.902  corr: 0.971  act+: 0.1  act-: 2.8 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.9395731 

> cat("b2:\n"); mvn.look(r <- rb2 <- bhmc_mvn (10000, 0.23))
b2:
m1: 1e-04  m2: -0.002  v1: 0.5167  v2: 2.054  corr: 0.971  act+: 0.3  act-: 0.3 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.7916238 

> cat("b3:\n"); mvn.look(r <- rb3 <- bhmc_mvn (10000, 0.24))
b3:
m1: -0.0037  m2: -0.005  v1: 0.4626  v2: 1.847  corr: 0.967  act+: 0.3  act-: 0.3 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.754276 

> cat("wb:\n"); mvn.look(r <- rwb <- wbhmc_mvn(10000, 0.22))
wb:
m1: 0.0011  m2: -0.003  v1: 0.4759  v2: 1.902  corr: 0.971  act+: 0.1  act-: 2.8 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.9395731 

> 
> cat("w0:\n"); mvn.look(r <- rw0 <- whmc_mvn (10000, 0.22, nsteps=20,window=2))
w0:
m1: -0.0025  m2: -0.005  v1: 0.4844  v2: 1.935  corr: 0.968  act+: 0.1  act-: 0.2 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.9796152 

> cat("w1:\n"); mvn.look(r <- rw1 <- whmc_mvn (10000, 0.23, nsteps=20,window=3))
w1:
m1: -0.0015  m2: -0.001  v1: 0.5037  v2: 2.002  corr: 0.969  act+: 0.1  act-: 0.2 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.923769 

> cat("w2:\n"); mvn.look(r <- rw2 <- whmc_mvn (10000, 0.23, nsteps=20, 
w2:
+                            window=structure(3,weights=c(0.5,1,0.5))))
m1: -9e-04  m2: 0.001  v1: 0.513  v2: 2.048  corr: 0.97  act+: 0.1  act-: 0.1 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.9661531 

> 
> cat("w3:\n"); mvn.look(r <- rw3 <- whmc_mvn (10000, 0.23, nsteps=20,window=10))
w3:
m1: -0.001  m2: 0.004  v1: 0.4985  v2: 2.007  corr: 0.97  act+: 1.1  act-: 1.1 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.9852849 

> cat("w4:\n"); mvn.look(r <- rw4 <- whmc_mvn (10000, 0.23, nsteps=20, 
w4:
+                            window=structure(10,weights=10:1)))
m1: -6e-04  m2: -0.002  v1: 0.5053  v2: 2.026  corr: 0.97  act+: 0.3  act-: 0.5 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.98111 

> cat("w5:\n"); mvn.look(r <- rw5 <- whmc_mvn (10000, 0.23, nsteps=20,window=21))
w5:
m1: -0.0058  m2: -0.006  v1: 0.512  v2: 2.051  corr: 0.971  act+: 2.4  act-: 2.3 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 1 

> cat("w6:\n"); mvn.look(r <- rw6 <- whmc_mvn (10000, 0.23, nsteps=20, 
w6:
+                                 window=structure(21,weights=1:21)))
m1: -0.003  m2: -0.007  v1: 0.4961  v2: 1.965  corr: 0.97  act+: 2.2  act-: 2.1 
>   cat("mean apr:",mean(r$ave[,"apr.1"]),"\n\n")
mean apr: 0.9908559 

> 
> proc.time()
    user   system  elapsed 
 383.235    5.152 1829.690 
